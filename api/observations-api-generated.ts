/* tslint:disable */
/* eslint-disable */
/*
langfuse

## Authentication

Authenticate with the API using Basic Auth, get API keys in the project settings:

- username: Langfuse Public Key
- password: Langfuse Secret Key

The version of the OpenAPI document: 


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Observation } from '../models';
// @ts-ignore
import { ObservationsViews } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ObservationsApi - axios parameter creator
 * @export
 */
export const ObservationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get a observation
         * @param {string} observationId The unique langfuse identifier of an observation, can be an event, span or generation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (observationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'observationId' is not null or undefined
            assertParamExists('get', 'observationId', observationId)
            const localVarPath = `/api/public/observations/{observationId}`
                .replace(`{${"observationId"}}`, encodeURIComponent(String(observationId !== undefined ? observationId : `-observationId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/public/observations/{observationId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of observations
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [name] 
         * @param {string} [userId] 
         * @param {string} [type] 
         * @param {string} [traceId] 
         * @param {string} [parentObservationId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMany: async (page?: number, limit?: number, name?: string, userId?: string, type?: string, traceId?: string, parentObservationId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/public/observations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (traceId !== undefined) {
                localVarQueryParameter['traceId'] = traceId;
            }

            if (parentObservationId !== undefined) {
                localVarQueryParameter['parentObservationId'] = parentObservationId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/public/observations',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ObservationsApi - functional programming interface
 * @export
 */
export const ObservationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ObservationsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get a observation
         * @param {ObservationsApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(requestParameters: ObservationsApiGetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Observation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get(requestParameters.observationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of observations
         * @param {ObservationsApiGetManyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMany(requestParameters: ObservationsApiGetManyRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObservationsViews>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMany(requestParameters.page, requestParameters.limit, requestParameters.name, requestParameters.userId, requestParameters.type, requestParameters.traceId, requestParameters.parentObservationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ObservationsApi - factory interface
 * @export
 */
export const ObservationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ObservationsApiFp(configuration)
    return {
        /**
         * Get a observation
         * @param {ObservationsApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(requestParameters: ObservationsApiGetRequest, options?: AxiosRequestConfig): AxiosPromise<Observation> {
            return localVarFp.get(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of observations
         * @param {ObservationsApiGetManyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMany(requestParameters: ObservationsApiGetManyRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ObservationsViews> {
            return localVarFp.getMany(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for get operation in ObservationsApi.
 * @export
 * @interface ObservationsApiGetRequest
 */
export type ObservationsApiGetRequest = {
    
    /**
    * The unique langfuse identifier of an observation, can be an event, span or generation
    * @type {string}
    * @memberof ObservationsApiGet
    */
    readonly observationId: string
    
}

/**
 * Request parameters for getMany operation in ObservationsApi.
 * @export
 * @interface ObservationsApiGetManyRequest
 */
export type ObservationsApiGetManyRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof ObservationsApiGetMany
    */
    readonly page?: number
    
    /**
    * 
    * @type {number}
    * @memberof ObservationsApiGetMany
    */
    readonly limit?: number
    
    /**
    * 
    * @type {string}
    * @memberof ObservationsApiGetMany
    */
    readonly name?: string
    
    /**
    * 
    * @type {string}
    * @memberof ObservationsApiGetMany
    */
    readonly userId?: string
    
    /**
    * 
    * @type {string}
    * @memberof ObservationsApiGetMany
    */
    readonly type?: string
    
    /**
    * 
    * @type {string}
    * @memberof ObservationsApiGetMany
    */
    readonly traceId?: string
    
    /**
    * 
    * @type {string}
    * @memberof ObservationsApiGetMany
    */
    readonly parentObservationId?: string
    
}

/**
 * ObservationsApiGenerated - object-oriented interface
 * @export
 * @class ObservationsApiGenerated
 * @extends {BaseAPI}
 */
export class ObservationsApiGenerated extends BaseAPI {
    /**
     * Get a observation
     * @param {ObservationsApiGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObservationsApiGenerated
     */
    public get(requestParameters: ObservationsApiGetRequest, options?: AxiosRequestConfig) {
        return ObservationsApiFp(this.configuration).get(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of observations
     * @param {ObservationsApiGetManyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObservationsApiGenerated
     */
    public getMany(requestParameters: ObservationsApiGetManyRequest = {}, options?: AxiosRequestConfig) {
        return ObservationsApiFp(this.configuration).getMany(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
