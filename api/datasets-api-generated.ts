/* tslint:disable */
/* eslint-disable */
/*
langfuse

## Authentication

Authenticate with the API using Basic Auth, get API keys in the project settings:

- username: Langfuse Public Key
- password: Langfuse Secret Key

The version of the OpenAPI document: 


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateDatasetRequest } from '../models';
// @ts-ignore
import { Dataset } from '../models';
// @ts-ignore
import { DatasetRun } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * DatasetsApi - axios parameter creator
 * @export
 */
export const DatasetsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a dataset
         * @param {CreateDatasetRequest} createDatasetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (createDatasetRequest: CreateDatasetRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createDatasetRequest' is not null or undefined
            assertParamExists('create', 'createDatasetRequest', createDatasetRequest)
            const localVarPath = `/api/public/datasets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createDatasetRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/public/datasets',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createDatasetRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a dataset and its items
         * @param {string} datasetName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (datasetName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetName' is not null or undefined
            assertParamExists('get', 'datasetName', datasetName)
            const localVarPath = `/api/public/datasets/{datasetName}`
                .replace(`{${"datasetName"}}`, encodeURIComponent(String(datasetName !== undefined ? datasetName : `-datasetName-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/public/datasets/{datasetName}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a dataset run and its items
         * @param {string} datasetName 
         * @param {string} runName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRuns: async (datasetName: string, runName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetName' is not null or undefined
            assertParamExists('getRuns', 'datasetName', datasetName)
            // verify required parameter 'runName' is not null or undefined
            assertParamExists('getRuns', 'runName', runName)
            const localVarPath = `/api/public/datasets/{datasetName}/runs/{runName}`
                .replace(`{${"datasetName"}}`, encodeURIComponent(String(datasetName !== undefined ? datasetName : `-datasetName-`)))
                .replace(`{${"runName"}}`, encodeURIComponent(String(runName !== undefined ? runName : `-runName-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/public/datasets/{datasetName}/runs/{runName}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DatasetsApi - functional programming interface
 * @export
 */
export const DatasetsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DatasetsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a dataset
         * @param {DatasetsApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(requestParameters: DatasetsApiCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Dataset>> {
            const createDatasetRequest: CreateDatasetRequest = {
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(createDatasetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a dataset and its items
         * @param {DatasetsApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(requestParameters: DatasetsApiGetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Dataset>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get(requestParameters.datasetName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a dataset run and its items
         * @param {DatasetsApiGetRunsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRuns(requestParameters: DatasetsApiGetRunsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetRun>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRuns(requestParameters.datasetName, requestParameters.runName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DatasetsApi - factory interface
 * @export
 */
export const DatasetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DatasetsApiFp(configuration)
    return {
        /**
         * Create a dataset
         * @param {DatasetsApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(requestParameters: DatasetsApiCreateRequest, options?: AxiosRequestConfig): AxiosPromise<Dataset> {
            return localVarFp.create(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a dataset and its items
         * @param {DatasetsApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(requestParameters: DatasetsApiGetRequest, options?: AxiosRequestConfig): AxiosPromise<Dataset> {
            return localVarFp.get(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a dataset run and its items
         * @param {DatasetsApiGetRunsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRuns(requestParameters: DatasetsApiGetRunsRequest, options?: AxiosRequestConfig): AxiosPromise<DatasetRun> {
            return localVarFp.getRuns(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for create operation in DatasetsApi.
 * @export
 * @interface DatasetsApiCreateRequest
 */
export type DatasetsApiCreateRequest = {
    
} & CreateDatasetRequest

/**
 * Request parameters for get operation in DatasetsApi.
 * @export
 * @interface DatasetsApiGetRequest
 */
export type DatasetsApiGetRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof DatasetsApiGet
    */
    readonly datasetName: string
    
}

/**
 * Request parameters for getRuns operation in DatasetsApi.
 * @export
 * @interface DatasetsApiGetRunsRequest
 */
export type DatasetsApiGetRunsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof DatasetsApiGetRuns
    */
    readonly datasetName: string
    
    /**
    * 
    * @type {string}
    * @memberof DatasetsApiGetRuns
    */
    readonly runName: string
    
}

/**
 * DatasetsApiGenerated - object-oriented interface
 * @export
 * @class DatasetsApiGenerated
 * @extends {BaseAPI}
 */
export class DatasetsApiGenerated extends BaseAPI {
    /**
     * Create a dataset
     * @param {DatasetsApiCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApiGenerated
     */
    public create(requestParameters: DatasetsApiCreateRequest, options?: AxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).create(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a dataset and its items
     * @param {DatasetsApiGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApiGenerated
     */
    public get(requestParameters: DatasetsApiGetRequest, options?: AxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).get(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a dataset run and its items
     * @param {DatasetsApiGetRunsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApiGenerated
     */
    public getRuns(requestParameters: DatasetsApiGetRunsRequest, options?: AxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).getRuns(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
