/* tslint:disable */
/* eslint-disable */
/*
langfuse

## Authentication

Authenticate with the API using Basic Auth, get API keys in the project settings:

- username: Langfuse Public Key
- password: Langfuse Secret Key

The version of the OpenAPI document: 


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DailyMetrics } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * MetricsApi - axios parameter creator
 * @export
 */
export const MetricsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get daily metrics of the Langfuse project
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [traceName] Optional filter by the name of the trace
         * @param {string} [userId] Optional filter by the userId associated with the trace
         * @param {Array<string>} [tags] Optional filter for metrics where traces include all of these tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        daily: async (page?: number, limit?: number, traceName?: string, userId?: string, tags?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/public/metrics/daily`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (traceName !== undefined) {
                localVarQueryParameter['traceName'] = traceName;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/public/metrics/daily',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MetricsApi - functional programming interface
 * @export
 */
export const MetricsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MetricsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get daily metrics of the Langfuse project
         * @param {MetricsApiDailyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async daily(requestParameters: MetricsApiDailyRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DailyMetrics>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.daily(requestParameters.page, requestParameters.limit, requestParameters.traceName, requestParameters.userId, requestParameters.tags, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MetricsApi - factory interface
 * @export
 */
export const MetricsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MetricsApiFp(configuration)
    return {
        /**
         * Get daily metrics of the Langfuse project
         * @param {MetricsApiDailyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        daily(requestParameters: MetricsApiDailyRequest = {}, options?: AxiosRequestConfig): AxiosPromise<DailyMetrics> {
            return localVarFp.daily(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for daily operation in MetricsApi.
 * @export
 * @interface MetricsApiDailyRequest
 */
export type MetricsApiDailyRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof MetricsApiDaily
    */
    readonly page?: number
    
    /**
    * 
    * @type {number}
    * @memberof MetricsApiDaily
    */
    readonly limit?: number
    
    /**
    * Optional filter by the name of the trace
    * @type {string}
    * @memberof MetricsApiDaily
    */
    readonly traceName?: string
    
    /**
    * Optional filter by the userId associated with the trace
    * @type {string}
    * @memberof MetricsApiDaily
    */
    readonly userId?: string
    
    /**
    * Optional filter for metrics where traces include all of these tags
    * @type {Array<string>}
    * @memberof MetricsApiDaily
    */
    readonly tags?: Array<string>
    
}

/**
 * MetricsApiGenerated - object-oriented interface
 * @export
 * @class MetricsApiGenerated
 * @extends {BaseAPI}
 */
export class MetricsApiGenerated extends BaseAPI {
    /**
     * Get daily metrics of the Langfuse project
     * @param {MetricsApiDailyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricsApiGenerated
     */
    public daily(requestParameters: MetricsApiDailyRequest = {}, options?: AxiosRequestConfig) {
        return MetricsApiFp(this.configuration).daily(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
